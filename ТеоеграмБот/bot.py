from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pymongo
from pymongo import MongoClient
import datetime
import logging
from dotenv import load_dotenv
import os
import asyncio
from aiogram import Router
from bson import ObjectId

# –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

client = MongoClient(MONGO_URI)
db = client['test']
polls_collection = db['tests']

bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()

active_poll = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")]],
    resize_keyboard=True
)

@router.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard
    )

@router.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def create_poll_start(message: types.Message):
    active_poll[message.from_user.id] = {"title": None, "questions": [], "state": "waiting_for_title"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (title) –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:")

@router.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_title")
async def set_poll_title(message: types.Message):
    active_poll[message.from_user.id]["title"] = message.text
    active_poll[message.from_user.id]["state"] = "waiting_for_question"
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:", reply_markup=finish_keyboard)

@router.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_question")
async def add_poll_question(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    active_poll[message.from_user.id]["questions"].append({"question": message.text, "options": []})
    active_poll[message.from_user.id]["state"] = "waiting_for_options"
    await message.answer(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@router.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_options")
async def add_poll_options(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    options = [opt.strip() for opt in message.text.split(",")]
    if not options:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    active_poll[message.from_user.id]["questions"][-1]["options"] = options
    active_poll[message.from_user.id]["state"] = "waiting_for_question"
    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(options)}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")

async def save_poll_to_db(user_id, title, questions):
    poll_data = {
        "user_id": user_id,
        "title": title,
        "questions": questions,
        "created_at": datetime.datetime.now()
    }
    result = polls_collection.insert_one(poll_data)
    return result.inserted_id

async def finish_poll_creation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_poll or not active_poll[user_id]["questions"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!", reply_markup=start_keyboard)
        return

    try:
        title = active_poll[user_id]["title"]
        questions = active_poll[user_id]["questions"]
        poll_id = await save_poll_to_db(user_id, title, questions)

        poll_summary = "\n".join(
            f"{i}. {question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question['options'])}"
            for i, question in enumerate(questions, 1)
        )

        await message.answer(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! ID –æ–ø—Ä–æ—Å–∞: {poll_id}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–í–æ—Ç –≤–∞—à –æ–ø—Ä–æ—Å:\n{poll_summary}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        del active_poll[user_id]
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard)

@router.message(lambda message: message.text == "üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def send_polls(message: types.Message):
    data = polls_collection.find()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã

    if polls_collection.count_documents({}) == 0:
        await message.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    inline_keyboard = [
        [InlineKeyboardButton(text=item.get("title", f"–û–ø—Ä–æ—Å {item['_id']}"), callback_data=f"poll_{item['_id']}")]
        for item in data
    ]

    # Create the InlineKeyboardMarkup with inline_keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è:", reply_markup=keyboard)

@router.callback_query(lambda query: query.data.startswith("poll_"))
async def handle_poll_selection(callback_query: types.CallbackQuery):
    poll_id = callback_query.data.split("_")[1]
    poll_data = polls_collection.find_one({"_id": ObjectId(poll_id)})

    if not poll_data:
        await callback_query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    title = poll_data.get("title", "–û–ø—Ä–æ—Å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    questions = poll_data.get("questions", [])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞
    await bot.send_message(callback_query.from_user.id, f"üìã **{title}**", parse_mode="Markdown")

    for question_data in questions:
        questionText = question_data.get("questionText", "–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        options = question_data.get("options", [])

        if options:
            await bot.send_poll(
                chat_id=callback_query.from_user.id,
                question=questionText,
                options=options,
                is_anonymous=False
            )
        else:
            await bot.send_message(callback_query.from_user.id, f"–í–æ–ø—Ä–æ—Å \"{question}\" –Ω–µ –∏–º–µ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
